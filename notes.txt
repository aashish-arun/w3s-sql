Tutorial

    Home
        SQL is a standard language for storing, manipulating and retrieving data in databases.
        Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.

    Intro

        What is SQL?
            It is a standard language for accessing and manipulating databases.
            It stands for Structured Query Language
            It lets you access and manipulate databases
            it became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987

        What Can SQL do?
            It can execute queries against a database
            It can retrieve data from a database
            It can insert records in a database
            It can update records in a database
            It can delete records from a database
            It can create new databases
            It can create new tables in a database
            It can create stored procedures in a database
            It can create views in a database
            It can set permissions on tables, procedures, and views
        
        SQL is a Standard - BUT....
            Although SQL is an ANSI/ISO standard, there are different versions of the SQL language.
            However, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.

            Note: 
                Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!
        
        Using SQL in Your Web Site
            To build a web site that shows data from a database, you will need:
                An RDBMS database program (i.e. MS Access, SQL Server, MySQL)
                To use a server-side scripting language, like PHP or ASP
                To use SQL to get the data you want
                To use HTML / CSS to style the page
        
        RDBMS
            It stands for Relational Database Management System.
            It is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
            The data in it is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.
            For example a table named "Customers":
                SELECT * FROM Customers;

                Note: 
                    Every table is broken up into smaller entities called fields. The fields in the Customers table consist of CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. A field is a column in a table that is designed to maintain specific information about every record in the table.
                    A record, also called a row, is each individual entry that exists in a table. For example, there are 91 records in the above Customers table. A record is a horizontal entity in a table.
                    A column is a vertical entity in a table that contains all information associated with a specific field in a table.

    Syntax

        SQL Statements
            Most of the actions you need to perform on a database are done with SQL statements.
            SQL statements consist of keywords that are easy to understand.
            The following SQL example statement returns all records from a table named "Customers":
                e.g. SELECT * FROM Customers;

        Database Tables
            A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"), and contain records (rows) with data.
            Below is a selection from the Customers table used in the examples:
                CustomerID	 CustomerName	                       ContactName	        Address	                        City	    PostalCode	Country
                1            Alfreds Futterkiste	               Maria Anders	        Obere Str. 57	                Berlin	    12209	    Germany
                2	         Ana Trujillo Emparedados y helados	   Ana Trujillo	        Avda. de la Constitución 2222	México D.F.	05021	    Mexico
                3	         Antonio Moreno Taquería	           Antonio Moreno	    Mataderos 2312	                México D.F.	05023	    Mexico
                4            Around the Horn	                   Thomas Hardy	        120 Hanover Sq.	                London	    WA1 1DP	    UK
                5	         Berglunds snabbköp	                   Christina Berglund	Berguvsvägen 8	                Luleå	    S-958 22	Sweden

                Note: 
                    The table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).
        
        Keep in Mind That...
            SQL keywords are NOT case sensitive: select is the same as SELECT (but it is recommened to write all SQL keywords in upper-case).

        Semicolon after SQL Statements?
            Some database systems require a semicolon at the end of each SQL statement.
            Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.

        Some of The Most Important SQL Commands
            SELECT          - extracts data from a database
            UPDATE          - updates data in a database
            DELETE          - deletes data from a database
            INSERT INTO     - inserts new data into a database
            CREATE DATABASE - creates a new database
            ALTER DATABASE  - modifies a database
            CREATE TABLE    - creates a new table
            ALTER TABLE     - modifies a table
            DROP TABLE      - deletes a table
            CREATE INDEX    - creates an index (search key)
            DROP INDEX      - deletes an index

    SELECT

        SELECT statement
            The SELECT statement is used to select data from a database.
                e.g. SELECT CustomerName, City FROM Customers;
            
        Syntax
            SELECT column1, column2, ...
            FROM table_name;

            Note: 
                Here, column1, column2, ... are the field names of the table you want to select data from and the table_name represents the name of the table you want to select data from.

        Select ALL columns
            If you want to return all columns, without specifying every column name, you can use the SELECT * syntax:
                e.g. SELECT * FROM Customers;

    SELECT DISTINCT

        SELECT DISTINCT Statement
            The SELECT DISTINCT statement is used to return only distinct (different) values.
                e.g. SELECT DISTINCT Country FROM Customers;
                
                Note: 
                    Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

        Syntax
            SELECT DISTINCT column1, column2, ...
            FROM table_name;

        SELECT Without DISTINCT
            If you omit the DISTINCT keyword, the SQL statement returns the "Country" value from all the records of the "Customers" table:
                e.g. SELECT Country FROM Customers;

        Count Distinct
            By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.
                e.g. SELECT COUNT(DISTINCT Country) FROM Customers;

                Note: 
                    The COUNT(DISTINCT column_name) is not supported in Microsoft Access databases.There is a workaround for MS Access using:
                        SELECT Count(*) AS DistinctCountries
                        FROM (SELECT DISTINCT Country FROM Customers);
    
    WHERE

        WHERE Clause
            The WHERE clause is used to filter records.
                e.g. SELECT * FROM Customers
                     WHERE Country='Mexico';
        
        Syntax
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition;

            Note: 
                The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
            
        Text Fields vs. Numeric Fields
            SQL requires single quotes around text values (most database systems will also allow double quotes).
            However, numeric fields should not be enclosed in quotes:
            e.g. SELECT * FROM Customers
                 WHERE CustomerID=1;

        Operators in The WHERE Clause
            You can use other operators than the = operator to filter the search.
                e.g. SELECT * FROM Customers
                     WHERE CustomerID > 80;
                    
                Note:
                    This will select all customers with a CustomerID greater than 80.
        
        Operators that can be used in the WHERE clause:
            =	        Equal	
            >	        Greater than	
            <	        Less than	
            >=	        Greater than or equal	
            <=	        Less than or equal	
            <>	        Not equal. 
                        Note: 
                            In some versions of SQL this operator may be written as !=	
            BETWEEN	    Between a certain range	
            LIKE	    Search for a pattern	
            IN	        To specify multiple possible values for a column
    
    Order By

        ORDER BY
            The ORDER BY keyword is used to sort the result-set in ascending or descending order.
                e.g. SELECT * FROM Products
                     ORDER BY Price;
                 
        Syntax
            SELECT column1, column2, ...
            FROM table_name
            ORDER BY column1, column2, ... ASC|DESC;
        
        DESC
            The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
                e.g. SELECT * FROM Products
                     ORDER BY Price DESC;
        
        Order Alphabetically
            For string values the ORDER BY keyword will order alphabetically:
                e.g. SELECT * FROM Products
                     ORDER BY ProductName;
        
        Alphabetically DESC
            To sort the table reverse alphabetically, use the DESC keyword:
                e.g. SELECT * FROM Products
                     ORDER BY ProductName DESC;

        ORDER BY Several Columns
            To sort the table using several columns
                e.g. SELECT * FROM Customers
                     ORDER BY Country, CustomerName;

                Note:
                    This will select all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName.
        
        Using Both ASC and DESC
            To sort the table using both ASC and DESC:
                e.g. SELECT * FROM Customers
                     ORDER BY Country ASC, CustomerName DESC;

                Note: 
                    This will select all customer from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column.

    And

        AND Operator
            The WHERE clause can contain one or many AND operators.
            In which the AND operator is used to filter records based on more than one condition and all conditions need to be true:
                e.g. SELECT *
                     FROM Customers
                     WHERE Country = 'Spain' AND CustomerName LIKE 'G%';

                Note:
                    This will select all customers from Spain that starts with the letter 'G'.
                
        Syntax
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 AND condition2 AND condition3 ...;
        
        AND vs OR
            The AND operator displays a record if all the conditions are TRUE.
            The OR operator displays a record if any of the conditions are TRUE.
        
        All Conditions Must Be True
            To select only the records that will evalute to true for all the mentioned conditions:
                e.g. SELECT * FROM Customers
                     WHERE Cunotry = 'Germany'
                     AND City = 'Berlin'
                     AND PostalCode > 12000;

                Note:
                    This will select all fields from Customers where Country is "Germany" AND City is "Berlin" AND PostalCode is higher than 12000.
                    
        Combining AND and OR
            You can combine the AND and OR operators.

            With Parenthesis
                Use parenthesis to get the correct result (i.e. make logical sense).
                    e.g. SELECT * FROM Customers
                         WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

                    Note: 
                        This will select all Spanish customers that starts with either "G" or "R".

            Without Parenthesis
                Without using parenthesis you will get the incorrect result (i.e. make logical error).
                    e.g. SELECT * FROM Customers
                         WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';

                    Note:
                        This will select all customers that either are from Spain and starts with either "G", or starts with the letter "R".
    
    Or

        OR Operator
            The WHERE clause can contain one or more OR operators.
            Similar to the AND operator the OR operator is also used to filter records based on more than one condition, but only one condition need to be true:
                e.g. SELECT *
                     FROM Customers
                     WHERE Country = 'Germany' OR Country = 'Spain';

                Note:
                    This will select all customers from Germany or Spain.
        
        Syntax
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 OR condition2 OR condition3 ...;
        
        OR vs AND
            The OR operator displays a record if any of the conditions are TRUE.
            The AND operator displays a record if all the conditions are TRUE.
        
        At Least One Condition Must Be True
            To select only the records that will evalute to true for any of the mentioned conditions:
                e.g. SELECT * FROM Customers
                     WHERE City = 'Berlin' OR CustomerName LIKE 'G%' OR Country = 'Norway';
                
                Note:
                    This will selects all fields from Customers where either City is "Berlin", CustomerName starts with the letter "G" or Country is "Norway".
        
        Combining AND and OR
            You can combine the AND and OR operators.

            With Parenthesis
                Use parenthesis to get the correct result (i.e. make logical sense).
                    e.g. SELECT * FROM Customers
                         WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

                    Note: 
                        This will select all Spanish customers that starts with either "G" or "R".

            Without Parenthesis
                Without using parenthesis you will get the incorrect result (i.e. make logical error).
                    e.g. SELECT * FROM Customers
                         WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';

                    Note:
                        This will select all customers that either are from Spain and starts with either "G", or starts with the letter "R".
    
    Not

        NOT Operator
            The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.
                e.g. SELECT * FROM Customers
                     WHERE NOT Country = 'Spain';

                Note:
                    This will select all the customers that are NOT from Spain. Also the NOT operator can used in combination with the = operator, but it can be also be used in combination with other comparison and/or logical operators.
        
        Syntax
            SELECT column1, column2, ...
            FROM table_name
            WHERE NOT condition;

        NOT operators with other comparison operator.
            We can use NOT operators with other logical and/or comparison operators

            NOT LIKE
                To get the records that evalute to true for the inverse of the LIKE condition.
                    e.g. SELECT * FROM Customers
                         WHERE CustomerName NOT LIKE 'A%';

                    Note:
                        This will select customers that does not start with the letter 'A'.

            NOT BETWEEN
                To get the records that evalute to true for the inverse of the BETWEEN condition.
                    e.g. SELECT * FROM Customers
                         WHERE CustomerID NOT BETWEEN 10 AND 60;

                    Note:
                        This will select customers that does not start with the letter 'A'.

            NOT IN
                To get the records that evalute to true for the inverse of the IN condition.
                    e.g. SELECT * FROM Customers
                         WHERE City NOT IN ('Paris', 'London');

                    Note:
                        This will select customers that are not from Paris or London.
        
            NOT Greater Than
                To get the records that evalute to true for the inverse of the greater than (>) condition.
                    e.g. SELECT * FROM Customers
                         WHERE NOT CustomerID > 50;

                    Note:
                        This will select customers with a CustomerId not greater than 50. Also there is a not-greater-than operator: !> that would give you the same result.

            NOT Less Than
                To get the records that evalute to true for the inverse of the less than (<) condition.
                    e.g. SELECT * FROM Customers
                         WHERE NOT CustomerID > 50;

                    Note:
                        This will select customers with a CustomerID not less than 50. Also there is a not-less-than operator: !< that would give you the same result.